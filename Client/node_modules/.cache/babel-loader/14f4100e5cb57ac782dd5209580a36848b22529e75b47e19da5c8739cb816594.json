{"ast":null,"code":"var _jsxFileName = \"/Users/evelynsun/Desktop/phreddit/Client/src/components/HomePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Post from './Post.jsx';\nimport SortPosts from \"./SortPosts.jsx\";\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\naxios.defaults.baseURL = 'http://localhost:8000';\nfunction HomePage({\n  goToPostPage,\n  getCommunityName,\n  getCommentLength,\n  isLoggedIn,\n  handleError,\n  checkPostExists\n}) {\n  _s();\n  console.log(\"made it to home page\");\n  const [type, setType] = useState('newest');\n  const [posts, setPosts] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [communities, setCommunities] = useState([]);\n  const [user, setUsers] = useState(null);\n  async function fetchAll() {\n    try {\n      const [postsRes, commentsRes, commRes] = await Promise.all([axios.get('/posts'), axios.get('/comments'), axios.get('/communities')]);\n      setPosts(postsRes.data);\n      setComments(commentsRes.data);\n      // setUsers(userRes.data);\n      setCommunities(commRes.data);\n    } catch (err) {\n      console.log(err);\n      handleError(err);\n    }\n  }\n  ;\n  useEffect(() => {\n    // async function fetchAll(){\n    //     try{\n    //         const [postsRes, commentsRes, commRes] = await Promise.all([\n    //             axios.get('/posts'),\n    //             axios.get('/comments'),\n    //             axios.get('/communities')\n    //         ]);\n    //         setPosts(postsRes.data);\n    //         setComments(commentsRes.data);\n    //         // setUsers(userRes.data);\n    //         setCommunities(commRes.data);\n    //     }\n    //     catch (err){\n    //         console.log(err);\n    //         handleError(err);\n    //     }\n    // }\n\n    fetchAll();\n    const localStorageChange = () => {\n      const currentTime = localStorage.getItem('postsUpdated');\n      if (currentTime) {\n        fetchAll();\n        localStorage.removeItem('postsUpdated');\n      }\n    };\n    window.addEventListener('storage', localStorageChange);\n    return () => {\n      window.removeEventListener('storage', localStorageChange);\n    };\n  }, []);\n  useEffect(() => {\n    async function fetchUser() {\n      if (!isLoggedIn) {\n        return;\n      }\n      try {\n        const [userRes] = await Promise.all([axios.get('/userProfile', {\n          withCredentials: true\n        })]);\n        setUsers(userRes.data);\n      } catch (err) {\n        console.log(err);\n        handleError(err);\n      }\n    }\n    fetchUser();\n  }, []);\n\n  // // refetch posts when you click back to the tab (for delete post)\n  // useEffect(() => {\n  //     const handleVisible = () => {\n  //         if(document.visibilityState === \"visible\") {\n  //             console.log(\"Refetching\");\n  //             fetchAll();\n  //         }\n  //     };\n\n  //     document.addEventListener('visibilitychange', handleVisible);\n\n  //     return () => {\n  //         document.removeEventListener('visibilitychange', handleVisible);\n  //     };\n  // }, []);\n\n  if (isLoggedIn && user === null) {\n    return;\n  }\n\n  //Map post id to parent community\n  const postToCommunity = {};\n  communities.forEach(c => c.postIDs.forEach(pid => {\n    postToCommunity[pid] = c._id;\n  }));\n\n  //Find out which community the user is in\n\n  if (isLoggedIn && user) {\n    const userCommIDs = communities.filter(c => c.members.includes(user.email)).map(c => c._id);\n\n    //Splitting posts\n    const user_posts = posts.filter(p => userCommIDs.includes(postToCommunity[p._id]));\n    const other_posts = posts.filter(p => !userCommIDs.includes(postToCommunity[p._id]));\n\n    //Sorting\n    var sorted_user_posts = SortPosts({\n      array: user_posts,\n      type,\n      comments\n    });\n    var sorted_other_posts = SortPosts({\n      array: other_posts,\n      type,\n      comments\n    });\n  } else {\n    //Sorting\n    var sortedPosts = SortPosts({\n      array: posts,\n      type,\n      comments\n    });\n  }\n  const handleClick = order => {\n    setType(order);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"homepage_setup\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"post_wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"post_info\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"All Posts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"post_buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"newest\",\n            type: \"submit\",\n            value: \"Newest\",\n            onClick: e => {\n              e.preventDefault();\n              handleClick('newest');\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"oldest\",\n            type: \"submit\",\n            value: \"Oldest\",\n            onClick: e => {\n              e.preventDefault();\n              handleClick('oldest');\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"active\",\n            type: \"submit\",\n            value: \"Active\",\n            onClick: e => {\n              e.preventDefault();\n              handleClick('active');\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"number_of_posts\",\n      children: [\" \", posts.length, \" posts \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this), isLoggedIn ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"posts\",\n        children: sorted_user_posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n          post: post,\n          goToPostPage: goToPostPage,\n          getCommunityName: getCommunityName,\n          community: false,\n          getCommentLength: getCommentLength,\n          checkPostExists: checkPostExists\n        }, post._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"posts\",\n        children: sorted_other_posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n          post: post,\n          goToPostPage: goToPostPage,\n          getCommunityName: getCommunityName,\n          community: false,\n          getCommentLength: getCommentLength,\n          checkPostExists: checkPostExists\n        }, post._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"posts\",\n      children: sortedPosts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n        post: post,\n        goToPostPage: goToPostPage,\n        getCommunityName: getCommunityName,\n        community: false,\n        getCommentLength: getCommentLength,\n        checkPostExists: checkPostExists\n      }, post._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"pd9B70psQK5rUkB4Dz6MqsS6Isk=\");\n_c = HomePage;\nexport default HomePage;\nconst commentShape = PropTypes.shape({\n  _id: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired,\n  commentIDs: PropTypes.arrayOf(PropTypes.string).isRequired,\n  commentedBy: PropTypes.string.isRequired,\n  commentedDate: PropTypes.instanceOf(Date).isRequired\n});\nconst postShape = PropTypes.shape({\n  _id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired,\n  linkFlairID: PropTypes.string.isRequired,\n  postedBy: PropTypes.string.isRequired,\n  postedDate: PropTypes.instanceOf(Date).isRequired,\n  commentIDs: PropTypes.arrayOf(PropTypes.string).isRequired,\n  views: PropTypes.number.isRequired\n});\nHomePage.propTypes = {\n  posts: PropTypes.arrayOf(postShape).isRequired,\n  goToPostPage: PropTypes.func.isRequired,\n  getCommunityName: PropTypes.func.isRequired,\n  comments: PropTypes.arrayOf(commentShape).isRequired,\n  getCommentLength: PropTypes.func.isRequired\n};\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","Post","SortPosts","PropTypes","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","defaults","baseURL","HomePage","goToPostPage","getCommunityName","getCommentLength","isLoggedIn","handleError","checkPostExists","_s","console","log","type","setType","posts","setPosts","comments","setComments","communities","setCommunities","user","setUsers","fetchAll","postsRes","commentsRes","commRes","Promise","all","get","data","err","localStorageChange","currentTime","localStorage","getItem","removeItem","window","addEventListener","removeEventListener","fetchUser","userRes","withCredentials","postToCommunity","forEach","c","postIDs","pid","_id","userCommIDs","filter","members","includes","email","map","user_posts","p","other_posts","sorted_user_posts","array","sorted_other_posts","sortedPosts","handleClick","order","id","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onClick","e","preventDefault","length","post","community","_c","commentShape","shape","string","isRequired","content","commentIDs","arrayOf","commentedBy","commentedDate","instanceOf","Date","postShape","title","linkFlairID","postedBy","postedDate","views","number","propTypes","func","$RefreshReg$"],"sources":["/Users/evelynsun/Desktop/phreddit/Client/src/components/HomePage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Post from './Post.jsx';\nimport SortPosts from \"./SortPosts.jsx\";\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:8000';\n\n\nfunction HomePage({ goToPostPage, getCommunityName, getCommentLength, isLoggedIn, handleError, checkPostExists}){\n    console.log(\"made it to home page\");\n    const [type, setType] = useState('newest');\n    const [posts, setPosts] = useState([]);\n    const [comments, setComments] = useState([]);\n    const [communities, setCommunities] = useState([]);\n    const [user, setUsers] = useState(null);\n    \n    async function fetchAll(){\n            try{\n                const [postsRes, commentsRes, commRes] = await Promise.all([\n                    axios.get('/posts'),\n                    axios.get('/comments'),\n                    axios.get('/communities')\n                ]);\n                setPosts(postsRes.data);\n                setComments(commentsRes.data);\n                // setUsers(userRes.data);\n                setCommunities(commRes.data);\n            }\n            catch (err){\n                console.log(err);\n                handleError(err);\n            }\n        };\n    \n    useEffect(()=>{\n        // async function fetchAll(){\n        //     try{\n        //         const [postsRes, commentsRes, commRes] = await Promise.all([\n        //             axios.get('/posts'),\n        //             axios.get('/comments'),\n        //             axios.get('/communities')\n        //         ]);\n        //         setPosts(postsRes.data);\n        //         setComments(commentsRes.data);\n        //         // setUsers(userRes.data);\n        //         setCommunities(commRes.data);\n        //     }\n        //     catch (err){\n        //         console.log(err);\n        //         handleError(err);\n        //     }\n        // }\n\n        fetchAll();\n\n        const localStorageChange = () => {\n            const currentTime = localStorage.getItem('postsUpdated');\n            if(currentTime){\n                fetchAll();\n                localStorage.removeItem('postsUpdated');\n            }\n        };\n\n        window.addEventListener('storage', localStorageChange);\n\n        return () => {\n            window.removeEventListener('storage', localStorageChange);\n        }\n    }, []);\n\n    useEffect(()=>{\n        async function fetchUser(){\n            if (!isLoggedIn){\n                return;\n            }\n            try{\n                const [userRes] = await Promise.all([\n                    axios.get('/userProfile', {withCredentials: true})\n                ]);\n\n                setUsers(userRes.data);\n            }\n            catch (err){\n                console.log(err);\n                handleError(err);\n            }\n        }\n\n        fetchUser();\n    }, []);\n\n    // // refetch posts when you click back to the tab (for delete post)\n    // useEffect(() => {\n    //     const handleVisible = () => {\n    //         if(document.visibilityState === \"visible\") {\n    //             console.log(\"Refetching\");\n    //             fetchAll();\n    //         }\n    //     };\n\n    //     document.addEventListener('visibilitychange', handleVisible);\n\n    //     return () => {\n    //         document.removeEventListener('visibilitychange', handleVisible);\n    //     };\n    // }, []);\n\n    if (isLoggedIn && user === null) {\n        return;\n    }\n\n\n\n    //Map post id to parent community\n    const postToCommunity = {};\n        communities.forEach(c =>\n            c.postIDs.forEach(pid => {\n                postToCommunity[pid] = c._id;\n            })\n        );\n\n    //Find out which community the user is in\n    \n    if (isLoggedIn && user){\n        const userCommIDs = communities\n        .filter(c => c.members.includes(user.email))\n        .map(c => c._id);\n\n        //Splitting posts\n        const user_posts  = posts.filter(p=>userCommIDs.includes(postToCommunity[p._id]));\n        const other_posts = posts.filter(p=>!userCommIDs.includes(postToCommunity[p._id]));\n\n         //Sorting\n        var sorted_user_posts  = SortPosts({ array: user_posts,  type, comments });\n        var sorted_other_posts = SortPosts({ array: other_posts, type, comments });\n\n    } else{\n        //Sorting\n        var sortedPosts = SortPosts({array: posts, type, comments});\n    }\n  \n    \n  \n\n\n    \n    const handleClick = (order) => {\n        setType(order);\n    };\n\n    return (\n    <div id=\"homepage_setup\">\n        <div id=\"post_wrapper\">\n            <div id=\"post_info\">\n                <h1>All Posts</h1>\n            </div>\n            <div id=\"post_buttons\">\n                <form>\n                    <input id=\"newest\" type=\"submit\" value=\"Newest\" onClick={(e) => {e.preventDefault(); handleClick('newest');}}/>\n                    <input id=\"oldest\" type=\"submit\" value=\"Oldest\" onClick={(e) => {e.preventDefault(); handleClick('oldest');}}/>\n                    <input id=\"active\" type=\"submit\" value=\"Active\" onClick={(e) => {e.preventDefault(); handleClick('active');}}/>\n                </form>\n            </div>\n        </div>\n        <h2 id=\"number_of_posts\"> {posts.length} posts </h2>\n        <hr/>\n        {isLoggedIn ? (\n            <><div id=\"posts\">\n                    {sorted_user_posts.map(post => (\n                        <Post key={post._id} post={post} goToPostPage={goToPostPage} getCommunityName={getCommunityName} community={false} getCommentLength={getCommentLength} checkPostExists={checkPostExists}/>\n                    ))}\n                </div><hr></hr><hr></hr><div id=\"posts\">\n                        {sorted_other_posts.map(post => (\n                            <Post key={post._id} post={post} goToPostPage={goToPostPage} getCommunityName={getCommunityName} community={false} getCommentLength={getCommentLength} checkPostExists={checkPostExists}/>\n                        ))}\n                    </div></>\n        ):(\n            <div id=\"posts\">\n            {sortedPosts.map(post => (\n                <Post key={post._id} post={post} goToPostPage={goToPostPage} getCommunityName={getCommunityName} community={false} getCommentLength={getCommentLength} checkPostExists={checkPostExists}/>\n            ))}\n            </div>\n        )}\n       \n\n    </div>\n    );\n}\n\nexport default HomePage;\n\nconst commentShape = PropTypes.shape({\n  _id: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired,\n  commentIDs: PropTypes.arrayOf(PropTypes.string).isRequired,\n  commentedBy: PropTypes.string.isRequired,\n  commentedDate: PropTypes.instanceOf(Date).isRequired\n});\n\nconst postShape = PropTypes.shape({\n    _id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n    linkFlairID: PropTypes.string.isRequired,\n    postedBy: PropTypes.string.isRequired,\n    postedDate: PropTypes.instanceOf(Date).isRequired,\n    commentIDs: PropTypes.arrayOf(PropTypes.string).isRequired,\n    views: PropTypes.number.isRequired\n});\n\nHomePage.propTypes = {\n    posts: PropTypes.arrayOf(postShape).isRequired,\n    goToPostPage: PropTypes.func.isRequired,\n    getCommunityName: PropTypes.func.isRequired,\n    comments: PropTypes.arrayOf(commentShape).isRequired,\n    getCommentLength: PropTypes.func.isRequired\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}