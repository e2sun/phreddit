{"ast":null,"code":"var _jsxFileName = \"/Users/evelynsun/Desktop/phreddit/Client/src/components/ParseDescription.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ParseDescription({\n  description\n}) {\n  const hyperlinkRegex = /\\[([^\\]]*)\\]\\((.*?)\\)/g;\n  let lastIndex = 0;\n  let match = hyperlinkRegex.exec(description);\n  const elements = [];\n  while (match != null) {\n    if (match.index > lastIndex) {\n      elements.push(description.slice(lastIndex, match.index)); //Keep track of description up to the part we need to replace\n    }\n    elements.push(/*#__PURE__*/_jsxDEV(\"a\", {\n      href: match[2],\n      children: match[1]\n    }, match.index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)); //Add hyperlink\n    lastIndex = match.index + match[0].length; //Update last index\n    // Update match to the next occurrence\n    match = hyperlinkRegex.exec(description);\n  }\n  //Add remaining description\n  if (lastIndex < description.length) {\n    elements.push(description.slice(lastIndex));\n  }\n  return elements;\n}\n_c = ParseDescription;\nexport default ParseDescription;\nvar _c;\n$RefreshReg$(_c, \"ParseDescription\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ParseDescription","description","hyperlinkRegex","lastIndex","match","exec","elements","index","push","slice","href","children","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["/Users/evelynsun/Desktop/phreddit/Client/src/components/ParseDescription.jsx"],"sourcesContent":["import React from \"react\";\n\nfunction ParseDescription({description}){\nconst hyperlinkRegex = /\\[([^\\]]*)\\]\\((.*?)\\)/g;\n\n\n    let lastIndex = 0;\n    let match=hyperlinkRegex.exec(description);\n    const elements=[];\n\n    \n    while (match!=null){\n      if (match.index>lastIndex){\n        elements.push(description.slice(lastIndex,match.index)); //Keep track of description up to the part we need to replace\n      }\n      elements.push(\n        <a key={match.index} href={match[2]}> \n          {match[1]}\n        </a>\n      ); //Add hyperlink\n      lastIndex = match.index + match[0].length; //Update last index\n      // Update match to the next occurrence\n      match = hyperlinkRegex.exec(description);\n    }\n    //Add remaining description\n    if (lastIndex<description.length){\n      elements.push(description.slice(lastIndex));\n    }\n    return elements;\n\n}\n\nexport default ParseDescription;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,gBAAgBA,CAAC;EAACC;AAAW,CAAC,EAAC;EACxC,MAAMC,cAAc,GAAG,wBAAwB;EAG3C,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,KAAK,GAACF,cAAc,CAACG,IAAI,CAACJ,WAAW,CAAC;EAC1C,MAAMK,QAAQ,GAAC,EAAE;EAGjB,OAAOF,KAAK,IAAE,IAAI,EAAC;IACjB,IAAIA,KAAK,CAACG,KAAK,GAACJ,SAAS,EAAC;MACxBG,QAAQ,CAACE,IAAI,CAACP,WAAW,CAACQ,KAAK,CAACN,SAAS,EAACC,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3D;IACAD,QAAQ,CAACE,IAAI,cACXT,OAAA;MAAqBW,IAAI,EAAEN,KAAK,CAAC,CAAC,CAAE;MAAAO,QAAA,EACjCP,KAAK,CAAC,CAAC;IAAC,GADHA,KAAK,CAACG,KAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEhB,CACL,CAAC,CAAC,CAAC;IACHZ,SAAS,GAAGC,KAAK,CAACG,KAAK,GAAGH,KAAK,CAAC,CAAC,CAAC,CAACY,MAAM,CAAC,CAAC;IAC3C;IACAZ,KAAK,GAAGF,cAAc,CAACG,IAAI,CAACJ,WAAW,CAAC;EAC1C;EACA;EACA,IAAIE,SAAS,GAACF,WAAW,CAACe,MAAM,EAAC;IAC/BV,QAAQ,CAACE,IAAI,CAACP,WAAW,CAACQ,KAAK,CAACN,SAAS,CAAC,CAAC;EAC7C;EACA,OAAOG,QAAQ;AAEnB;AAACW,EAAA,GA5BQjB,gBAAgB;AA8BzB,eAAeA,gBAAgB;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}