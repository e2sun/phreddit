{"ast":null,"code":"var _jsxFileName = \"/Users/evelynsun/Desktop/phreddit/Client/src/components/NewComment.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewComment({\n  object,\n  onCommentAdded,\n  editComment,\n  onDelete,\n  // delete handler\n  user,\n  isEdit,\n  comment\n}) {\n  _s();\n  const [commentContent, setCommentContent] = useState('');\n\n  // prefill when editing\n  useEffect(() => {\n    if (isEdit && comment) {\n      setCommentContent(comment.content);\n    }\n  }, [isEdit, comment]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!commentContent.trim()) {\n      alert(\"Please add content to the comment\");\n      return;\n    }\n    if (commentContent.length > 500) {\n      alert(\"Comment content is too long, please shorten it\");\n      return;\n    }\n\n    // hyperlink validation\n    const hyperlinkRegex = /\\[([^\\]]*)\\]\\((.*?)\\)/g;\n    let match;\n    while ((match = hyperlinkRegex.exec(commentContent)) !== null) {\n      if (!match[1].trim()) return alert(\"The hyperlink text (inside []) cannot be empty!\");\n      if (!match[2].trim()) return alert(\"The hyperlink URL (inside ()) cannot be empty!\");\n      if (!/^https?:\\/\\//.test(match[2])) {\n        return alert(\"The hyperlink URL must begin with 'http://' or 'https://'\");\n      }\n    }\n    const payload = {\n      content: commentContent,\n      commentIDs: [],\n      commentedBy: user.displayName,\n      commentedDate: new Date(),\n      objectId: object._id\n    };\n    if (isEdit) {\n      editComment(payload, comment);\n    } else {\n      onCommentAdded(payload);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"newcomment_setup\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"newcomment_header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: isEdit ? \"Edit a Comment\" : \"Add a Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"newcomment_form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"comment\",\n        placeholder: \"Comment (required, max 500 characters)\",\n        onFocus: e => e.target.placeholder = \"\",\n        onChange: e => setCommentContent(e.target.value),\n        value: commentContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"submit_comment\",\n        type: \"submit\",\n        value: isEdit ? \"Edit Comment\" : \"Submit Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), isEdit && onDelete && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        id: \"delete_comment\",\n        style: {\n          backgroundColor: '#f44336',\n          color: '#fff'\n        },\n        onClick: () => {\n          if (window.confirm(\"Are you sure you want to delete this comment?\")) {\n            onDelete(comment);\n          }\n        },\n        children: \"Delete Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(NewComment, \"sQm1L2w/zP9bR+fdAQeZFbDmCqg=\");\n_c = NewComment;\nexport default NewComment;\nconst objectShape = PropTypes.shape({\n  _id: PropTypes.string.isRequired\n});\nNewComment.propTypes = {\n  object: objectShape.isRequired,\n  onCommentAdded: PropTypes.func.isRequired,\n  editComment: PropTypes.func,\n  // required when isEdit\n  onDelete: PropTypes.func,\n  // optional delete handler\n  user: PropTypes.shape({\n    displayName: PropTypes.string.isRequired\n  }).isRequired,\n  isEdit: PropTypes.bool,\n  comment: PropTypes.shape({\n    _id: PropTypes.string\n  }).isRequired\n};\nvar _c;\n$RefreshReg$(_c, \"NewComment\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","jsxDEV","_jsxDEV","NewComment","object","onCommentAdded","editComment","onDelete","user","isEdit","comment","_s","commentContent","setCommentContent","content","handleSubmit","e","preventDefault","trim","alert","length","hyperlinkRegex","match","exec","test","payload","commentIDs","commentedBy","displayName","commentedDate","Date","objectId","_id","id","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","onFocus","target","onChange","value","type","style","backgroundColor","color","onClick","window","confirm","_c","objectShape","shape","string","isRequired","propTypes","func","bool","$RefreshReg$"],"sources":["/Users/evelynsun/Desktop/phreddit/Client/src/components/NewComment.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\n\nfunction NewComment({\n  object,\n  onCommentAdded,\n  editComment,\n  onDelete,       // delete handler\n  user,\n  isEdit,\n  comment\n}) {\n  const [commentContent, setCommentContent] = useState('');\n\n  // prefill when editing\n  useEffect(() => {\n    if (isEdit && comment) {\n      setCommentContent(comment.content);\n    }\n  }, [isEdit, comment]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!commentContent.trim()) {\n      alert(\"Please add content to the comment\");\n      return;\n    }\n    if (commentContent.length > 500) {\n      alert(\"Comment content is too long, please shorten it\");\n      return;\n    }\n\n    // hyperlink validation\n    const hyperlinkRegex = /\\[([^\\]]*)\\]\\((.*?)\\)/g;\n    let match;\n    while ((match = hyperlinkRegex.exec(commentContent)) !== null) {\n      if (!match[1].trim()) return alert(\"The hyperlink text (inside []) cannot be empty!\");\n      if (!match[2].trim()) return alert(\"The hyperlink URL (inside ()) cannot be empty!\");\n      if (!/^https?:\\/\\//.test(match[2])) {\n        return alert(\"The hyperlink URL must begin with 'http://' or 'https://'\");\n      }\n    }\n\n    const payload = {\n      content:       commentContent,\n      commentIDs:    [],\n      commentedBy:   user.displayName,\n      commentedDate: new Date(),\n      objectId:      object._id\n    };\n\n    if (isEdit) {\n      editComment(payload, comment);\n    } else {\n      onCommentAdded(payload);\n    }\n  };\n\n  return (\n    <div id=\"newcomment_setup\">\n      <div id=\"newcomment_header\">\n        <h1>{isEdit ? \"Edit a Comment\" : \"Add a Comment\"}</h1>\n      </div>\n      <form id=\"newcomment_form\" onSubmit={handleSubmit}>\n        <textarea\n          id=\"comment\"\n          placeholder=\"Comment (required, max 500 characters)\"\n          onFocus={e => e.target.placeholder = \"\"}\n          onChange={e => setCommentContent(e.target.value)}\n          value={commentContent}\n        />\n        <input id=\"submit_comment\" type=\"submit\" value={isEdit ? \"Edit Comment\" : \"Submit Comment\"}\n        />\n\n        {isEdit && onDelete && (\n          <button\n            type=\"button\"\n            id=\"delete_comment\"\n            style={{ backgroundColor: '#f44336', color: '#fff' }}\n            onClick={() => {\n              if (window.confirm(\"Are you sure you want to delete this comment?\")) {\n                onDelete(comment);\n              }\n            }}\n          >\n            Delete Comment\n          </button>\n        )}\n      </form>\n    </div>\n  );\n}\n\nexport default NewComment;\n\nconst objectShape = PropTypes.shape({\n  _id: PropTypes.string.isRequired\n});\n\nNewComment.propTypes = {\n  object:         objectShape.isRequired,\n  onCommentAdded: PropTypes.func.isRequired,\n  editComment:    PropTypes.func,            // required when isEdit\n  onDelete:       PropTypes.func,            // optional delete handler\n  user:           PropTypes.shape({\n    displayName: PropTypes.string.isRequired\n  }).isRequired,\n  isEdit:         PropTypes.bool,\n  comment:        PropTypes.shape({ _id: PropTypes.string }).isRequired\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}